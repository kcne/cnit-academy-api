generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id               Int               @id @default(autoincrement())
  firstName        String
  lastName         String
  email            String            @unique
  password         String
  role             Role
  isEmailVerified  Boolean           @default(false)
  verificationCode String?
  expiresAt        DateTime?
  Profile          Profile?
  Blog             Blog[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  totalCoins       Int               @default(0)
  badges           Badge[]
  UserLecture      UserLecture[]
  UserCourse       UserCourse[]
  UserProgram      UserProgram[]
  languageCode     String            @default("en")
  UserLanguage     Language          @relation(fields: [languageCode], references: [languageCode])
  Comment          Comment[]
  UserQuizAttempt  UserQuizAttempt[]
  UserActivity     UserActivity[]
  links            Links[]
  roleRequests     RoleRequest[]
  professor        Professor?
  Course           Course[]
  Program          Program[]
  Lecture          Lecture[]
}

enum Role {
  USER
  INSTRUCTOR
  ADMIN
}

model Profile {
  id         Int          @id
  user       User         @relation(fields: [id], references: [id])
  skills     String // comma seperated list for now
  education  Education[]  @relation("ProfileEducation")
  experience Experience[] @relation("ProfileExperience")
  pfp        String       @default("/pfp/default")
}

model Education {
  id           Int       @id @default(autoincrement())
  title        String
  description  String
  organization String
  startPeriod  DateTime
  endPeriod    DateTime?
  profile      Profile   @relation("ProfileEducation", fields: [profileId], references: [id])
  profileId    Int
}

model Experience {
  id           Int       @id @default(autoincrement())
  title        String
  description  String
  organization String
  startPeriod  DateTime
  endPeriod    DateTime?
  profile      Profile   @relation("ProfileExperience", fields: [profileId], references: [id])
  profileId    Int
}

model Course {
  id              Int          @id @default(autoincrement())
  title           String
  description     String?
  durationInHours Float?
  createdAt       DateTime     @default(now())
  coins           Int          @default(0)
  createdBy       User         @relation(fields: [userId], references: [id])
  userId          Int
  lectures        Lecture[]
  UserCourse      UserCourse[]
}

model Blog {
  id              Int           @id @default(autoincrement())
  title           String
  published       Boolean       @default(false)
  content         String
  blogDescription String?
  slug            String        @unique
  createdBy       User          @relation(fields: [userId], references: [id])
  userId          Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  CommentBlog     CommentBlog[]
}

model Program {
  id                  Int           @id @default(autoincrement())
  title               String
  description         String
  durationInDays      Int
  applicationDeadline DateTime
  createdAt           DateTime      @default(now())
  coins               Int           @default(0)
  createdBy           User          @relation(fields: [userId], references: [id])
  userId              Int
  UserProgram         UserProgram[]
}

model Lecture {
  id          Int           @id @default(autoincrement())
  title       String
  content     String
  videoUrl    String?
  courseId    Int
  course      Course        @relation(fields: [courseId], references: [id])
  createdAt   DateTime      @default(now())
  coins       Int           @default(0)
  createdBy   User          @relation(fields: [userId], references: [id])
  userId      Int
  UserLecture UserLecture[]
  Quiz        Quiz?
}

model UserLecture {
  id        Int       @id @default(autoincrement())
  userId    Int
  lectureId Int
  user      User      @relation(fields: [userId], references: [id])
  lecture   Lecture   @relation(fields: [lectureId], references: [id])
  finished  DateTime?

  @@unique([userId, lectureId])
}

model UserCourse {
  id       Int       @id @default(autoincrement())
  userId   Int
  courseId Int
  user     User      @relation(fields: [userId], references: [id])
  course   Course    @relation(fields: [courseId], references: [id])
  finished DateTime?

  @@unique([userId, courseId])
}

model UserProgram {
  id        Int       @id @default(autoincrement())
  userId    Int
  programId Int
  user      User      @relation(fields: [userId], references: [id])
  program   Program   @relation(fields: [programId], references: [id])
  applied   DateTime?
  enrolled  DateTime?
  finished  DateTime?

  @@unique([userId, programId])
}

model Language {
  languageCode String @id
  language     String
  User         User[]
}

model Comment {
  id          Int           @id @default(autoincrement())
  userId      Int
  user        User          @relation(fields: [userId], references: [id])
  content     String
  createdAt   DateTime      @default(now())
  CommentBlog CommentBlog[]
}

model CommentBlog {
  id        Int     @id @default(autoincrement())
  commentId Int
  blogId    Int
  comment   Comment @relation(fields: [commentId], references: [id])
  blog      Blog    @relation(fields: [blogId], references: [id])
}

model Quiz {
  id        Int               @id @default(autoincrement())
  lecture   Lecture           @relation(fields: [id], references: [id])
  questions Question[]
  attempts  UserQuizAttempt[]
}

model Question {
  id      Int    @id @default(autoincrement())
  text    String
  quizId  Int
  quiz    Quiz   @relation(fields: [quizId], references: [id])
  score   Int
  options Json // ["c", "c++", "java", "javascript"]
  answer  String
}

model UserQuizAttempt {
  id     Int   @id @default(autoincrement())
  userId Int
  quizId Int
  user   User  @relation(fields: [userId], references: [id])
  quiz   Quiz  @relation(fields: [quizId], references: [id])
  score  Float // 0-1 ratio
}

model Badge {
  id    Int    @id @default(autoincrement())
  icon  String // /badges/streak10.png
  title String
  cost  Int
  Users User[]
}

model UserActivity {
  id      Int      @id
  user    User     @relation(fields: [id], references: [id])
  loginAt DateTime @default(now())
  streak  Int
}

model RoleRequest {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  bio         String
  age         String
  photoURL    String
  coverLetter String
  status      String   @default("pending")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  links       Links[]
}

model Professor {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  user        User     @relation(fields: [userId], references: [id])
  bio         String
  age         String
  photoURL    String
  coverLetter String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  links       Links[]
}

model Links {
  key           String
  value         String
  userId        Int
  user          User        @relation(fields: [userId], references: [id])
  roleRequestId Int
  roleRequest   RoleRequest @relation(fields: [roleRequestId], references: [id])
  professorId   Int?
  professor     Professor?  @relation(fields: [professorId], references: [id])

  @@id([key, value, userId, roleRequestId], name: "key_value_userId_roleRequestId")
}
